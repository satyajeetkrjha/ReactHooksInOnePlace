{"ast":null,"code":"var _jsxFileName = \"/Users/satyajeet/Desktop/reacthooksconcepts/hooks/src/components/ClassCounter.js\";\n/*\nWhy hooks ? Now,We can use state without class based components \nReason1\nclasses don't minfiy really well and make hot reloading very unreliable .\nReason2\nThere is no particular way to reuse stateful component logic .\nHoc and render props patterns tries to solve this issue but the code is harder to follow .\nThere is a need to share stateful logic in a better way .Hooks help in this .\nReason3\nCreate components for complex scanerios such as data fetching and data subscribing to events .\nRelated code is not organized and put in one place .\nEx .Data fetching - in componentDidMount and componentDidUpdate\nex. Event listeners - componentDidMount and componentWillUnmount\n*/\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ClassCounter extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementCount = () => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n    this.state = {\n      count: 0\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.incrementCount,\n        children: \"Increment Count\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Count is \", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 8\n    }, this);\n  }\n}\nexport default ClassCounter;","map":{"version":3,"names":["React","Component","ClassCounter","constructor","props","incrementCount","setState","count","state","render"],"sources":["/Users/satyajeet/Desktop/reacthooksconcepts/hooks/src/components/ClassCounter.js"],"sourcesContent":["/*\nWhy hooks ? Now,We can use state without class based components \nReason1\nclasses don't minfiy really well and make hot reloading very unreliable .\nReason2\nThere is no particular way to reuse stateful component logic .\nHoc and render props patterns tries to solve this issue but the code is harder to follow .\nThere is a need to share stateful logic in a better way .Hooks help in this .\nReason3\nCreate components for complex scanerios such as data fetching and data subscribing to events .\nRelated code is not organized and put in one place .\nEx .Data fetching - in componentDidMount and componentDidUpdate\nex. Event listeners - componentDidMount and componentWillUnmount\n*/\nimport React, { Component } from 'react'\n\nexport class ClassCounter extends Component {\n  constructor(props){\n    super(props);\n    this.state ={\n        count:0\n    }\n  };\n  incrementCount =()=>{\n    this.setState({\n        count:this.state.count+1\n    })\n  }  \n  render() {\n    return (\n       <div>\n        <button onClick={this.incrementCount}>Increment Count</button>\n        <h1>Count is {this.state.count}</h1>\n       </div>\n    )\n  }\n}\n\nexport default ClassCounter;\n\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAA;AAExC,OAAO,MAAMC,YAAY,SAASD,SAAS,CAAC;EAC1CE,WAAW,CAACC,KAAK,EAAC;IAChB,KAAK,CAACA,KAAK,CAAC;IAAC,KAKfC,cAAc,GAAE,MAAI;MAClB,IAAI,CAACC,QAAQ,CAAC;QACVC,KAAK,EAAC,IAAI,CAACC,KAAK,CAACD,KAAK,GAAC;MAC3B,CAAC,CAAC;IACJ,CAAC;IARC,IAAI,CAACC,KAAK,GAAE;MACRD,KAAK,EAAC;IACV,CAAC;EACH;EAMAE,MAAM,GAAG;IACP,oBACG;MAAA,wBACC;QAAQ,OAAO,EAAE,IAAI,CAACJ,cAAe;QAAA,UAAC;MAAe;QAAA;QAAA;QAAA;MAAA,QAAS,eAC9D;QAAA,WAAI,WAAS,EAAC,IAAI,CAACG,KAAK,CAACD,KAAK;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QAC/B;EAEX;AACF;AAEA,eAAeL,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}